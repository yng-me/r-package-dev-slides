---
title: "Development of R package <br>and its benefits in managing the CBMS Data"
subtitle: "Bhas Abdulsamad"
author: "Community-Based Statistics Division"
date: "04/17/2024"
date-format: "D MMMM YYYY"
format: 
  revealjs:
    slide-number: true
    embed-resources: true
    theme: assets/theme.scss
    include-after-body: assets/clean_title_page.html
    footer: "Development of R package and its benefits in managing the CBMS Data"
---

```{r, echo=F}
topic_01 <- "What motivates us to develop our own package"
topic_02 <- "Benefits of developing our own R package"
topic_03 <- "The RCBMS ecosystem"
topic_04 <- "Useful references"
```


## Topics of discussion

- `r topic_01`
- `r topic_02`
- `r topic_03`
- `r topic_04`


# `r topic_01`

---

## RCBMS-One project structure

:::: {.columns}

::: {.column width="55%"}

![](assets/01-project-structure.png)

:::

::: {.column width="45%"}

- We created a folder structure to establish a convention 

::: incremental

- It defines a scope and separation of concerns

:::

:::

::::

::: footer
`r topic_01`
:::


## RCBMS-One project structure

:::: {.columns}

::: {.column width="55%"}

![](assets/02-index.png)

:::

::: {.column width="45%"}

- We created folder structure to establish a convention 
- It defines a scope and separation of concerns
- This helps us implement layer of abstractions for efficiency

:::

::::

::: footer
`r topic_01`
:::

## RCBMS-One config

:::: {.columns}

::: {.column width="55%"}

![](assets/03-config.png)

:::

::: {.column width="45%"}

- To dictate the behavior of the entire script, we use a configuration file 

:::

::::

::: footer
`r topic_01`
:::

## RCBMS-One config

:::: {.columns}

::: {.column width="55%"}

![](assets/04-config.png)

:::

::: {.column width="45%"}

- To dictate the behavior of the entire script, we use a configuration file 

- It allows users with zero background in R to use the script 

::: incremental

- This file is also used to interact with RCBMS App 

:::

:::

::: footer
`r topic_01`
:::

::::


## RCBMS-One core

:::: {.columns}

::: {.column width="55%"}

![](assets/05-core.png)

:::

::: {.column width="45%"}

- Most of the heavy lifting is done inside the `core`:


:::

::::

::: footer
`r topic_01`
:::

## RCBMS-One core: preload

:::: {.columns}

::: {.column width="55%"}

![](assets/06-preload.png)

:::

::: {.column width="45%"}

- Most of the heavy lifting is done inside the `core`:

  - `preload` - sequence of operation to be executed

:::

::::

::: footer
`r topic_01`
:::


## RCBMS-One core: helpers

:::: {.columns}

::: {.column width="55%"}

![](assets/07-helpers.png)

:::

::: {.column width="45%"}

- Most of the heavy lifting is done inside the `core`:

  - `preload` - sequence of operation to be executed
  
  - `helpers` - collection of utility and helper functions (around **100** user-defined functions)

:::

::::

::: footer
`r topic_01`
:::


## RCBMS-One core: helpers

#### `set_config()`

```{r, echo=T, eval=F}
set_config <- function(config_file, cwd = NULL) {
  valid_type_ext <- c('yml', 'json')
  ext <- tools::file_ext(config_file)
  if(!(ext[1] %in% valid_type_ext)) {
    stop("Accepts only YAML or JSON file format.")
  }
  
  if(is.null(cwd)) file <- clean_path(config_file)
  else file <- clean_path(paste0(cwd, '/', config_file))
  
  if(ext == 'yml') config <- yaml::read_yaml(file, readLines.warn = F)
  if(ext == 'json') config <- jsonlite::fromJSON(file)
  
  return(config)
}
```

::: footer
`r topic_01`
:::

## Is this implementation optimal?

::: incremental

- Performance issues (since all helper functions must be pre-loaded to the environment)
- `core` scripts are visible and can be still be modified by anyone. Either done intentionally or accidentally, it could introduce potential bugs or produce inconsistent results.
- Lack of unit testing
- Lack of proper documentation

:::

::: footer
`r topic_01`
:::


# `r topic_02`

---

## What is an R package?

> Packages are the fundamental units of **reproducible** R code. They include **reusable** R functions, the **documentation** that describes how to use them, and **sample data**.

<p style="text-align: right; font-style: italic; font-size: 24px; padding-right: 100px">\- Hadley Wickham and Jennifer Bryan, 2023</p>


::: footer
`r topic_02`
:::


## `r topic_02`


::: incremental

- Reusable codes
- Separation of concerns
- Automate tedious and repetitive tasks (DRY principle)
- Improve performance
- Proper documentation
- Unit testing
- Reproducible results
- Integration with other CBMS systems and applications

:::

::: footer
`r topic_02`
:::


# `r topic_03`

---

## System design (simplified version)


![](assets/design.svg)


::: footer
`r topic_03`
:::



## Using `rcbms` package

```{r, eval=F, echo=T, `code-line-numbers`="|1|2|3|4|6|7-16|17"}
library(rcbms)
config <- set_config("configs")
references <- load_references(config)
parquet <- read_cbms_data(references, config)

cv <- rcbms_list("cv")
for(i in seq_along(config$input_data)) {
  current_input_data <- config$input_data[i]
  script_files <- references$script_files |> 
    dplyr::filter(input_data == current_input_data) |> 
    dplyr::pull(file)
  
  lapply(script_files, source)
  
}

generate_validation(cv, references, config)

```

::: footer
`r topic_03`
:::


## Using `rcbms` package

![](assets/08-docs.png)

::: footer
`r topic_03`
:::


# Demo

---


## Useful References

#### R package development

- [R Packages (2e)](https://r-pkgs.org/) 
- [Building R packages with devtools and usethis](https://www.youtube.com/watch?v=EpTkT6Rkgbs&t=377s)
- [It's a Great Time to be an R Package Developer!](https://www.youtube.com/watch?v=hfqjyeA_z7s&t=369s)

#### Slides

- [Development of R package and its benefits in managing the CBMS Data](https://github.com/yng-me/r-package-dev-slides)

